{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport INT8 from '@stdlib/constants-int8-num-bytes';\nimport UINT8 from '@stdlib/constants-uint8-num-bytes';\nimport INT16 from '@stdlib/constants-int16-num-bytes';\nimport UINT16 from '@stdlib/constants-uint16-num-bytes';\nimport INT32 from '@stdlib/constants-int32-num-bytes';\nimport UINT32 from '@stdlib/constants-uint32-num-bytes';\nimport FLOAT16 from '@stdlib/constants-float16-num-bytes';\nimport FLOAT32 from '@stdlib/constants-float32-num-bytes';\nimport FLOAT64 from '@stdlib/constants-float64-num-bytes';\nimport COMPLEX64 from '@stdlib/constants-complex64-num-bytes';\nimport COMPLEX128 from '@stdlib/constants-complex128-num-bytes';\n\n\n// MAIN //\n\n/**\n* Returns the size (in bytes) of the canonical binary representation of a specified numeric type.\n*\n* @param {string} dtype - numeric type\n* @throws {TypeError} must provide a recognized numeric type\n* @returns {integer} size in bytes\n*\n* @example\n* var s = sizeOf( 'int8' );\n* // returns 1\n*\n* @example\n* var s = sizeOf( 'uint8' );\n* // returns 1\n*\n* @example\n* var s = sizeOf( 'int16' );\n* // returns 2\n*/\nfunction sizeOf( dtype ) {\n\tswitch ( dtype ) {\n\tcase 'float64':\n\t\treturn FLOAT64;\n\tcase 'int32':\n\t\treturn INT32;\n\tcase 'uint32':\n\t\treturn UINT32;\n\tcase 'float32':\n\t\treturn FLOAT32;\n\tcase 'int8':\n\t\treturn INT8;\n\tcase 'uint8':\n\t\t// Fall-through...\n\tcase 'uint8c': // eslint-disable-line no-fallthrough\n\t\treturn UINT8;\n\tcase 'int16':\n\t\treturn INT16;\n\tcase 'uint16':\n\t\treturn UINT16;\n\tcase 'float16':\n\t\treturn FLOAT16;\n\tcase 'complex128':\n\t\treturn COMPLEX128;\n\tcase 'complex64':\n\t\treturn COMPLEX64;\n\tdefault:\n\t\tthrow new TypeError( format( '1XZBn,Ol', dtype ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default sizeOf;\n"],"names":["sizeOf","dtype","FLOAT64","INT32","UINT32","FLOAT32","INT8","UINT8","INT16","UINT16","FLOAT16","COMPLEX128","COMPLEX64","TypeError","format"],"mappings":";;+qCAyDA,SAASA,EAAQC,GAChB,OAASA,GACT,IAAK,UACJ,OAAOC,EACR,IAAK,QACJ,OAAOC,EACR,IAAK,SACJ,OAAOC,EACR,IAAK,UACJ,OAAOC,EACR,IAAK,OACJ,OAAOC,EACR,IAAK,QAEL,IAAK,SACJ,OAAOC,EACR,IAAK,QACJ,OAAOC,EACR,IAAK,SACJ,OAAOC,EACR,IAAK,UACJ,OAAOC,EACR,IAAK,aACJ,OAAOC,EACR,IAAK,YACJ,OAAOC,EACR,QACC,MAAM,IAAIC,UAAWC,EAAQ,WAAYb,IAE3C"}