{"version":3,"file":"browser.js","sources":["../lib/main.js","../node_modules/@stdlib/constants-complex64-num-bytes/lib/index.js","../node_modules/@stdlib/constants-float32-num-bytes/lib/index.js","../node_modules/@stdlib/constants-uint8-num-bytes/lib/index.js","../node_modules/@stdlib/constants-float16-num-bytes/lib/index.js","../node_modules/@stdlib/constants-complex128-num-bytes/lib/index.js","../node_modules/@stdlib/error-tools-fmtprodmsg/lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport INT8 from '@stdlib/constants-int8-num-bytes';\nimport UINT8 from '@stdlib/constants-uint8-num-bytes';\nimport INT16 from '@stdlib/constants-int16-num-bytes';\nimport UINT16 from '@stdlib/constants-uint16-num-bytes';\nimport INT32 from '@stdlib/constants-int32-num-bytes';\nimport UINT32 from '@stdlib/constants-uint32-num-bytes';\nimport FLOAT16 from '@stdlib/constants-float16-num-bytes';\nimport FLOAT32 from '@stdlib/constants-float32-num-bytes';\nimport FLOAT64 from '@stdlib/constants-float64-num-bytes';\nimport COMPLEX64 from '@stdlib/constants-complex64-num-bytes';\nimport COMPLEX128 from '@stdlib/constants-complex128-num-bytes';\n\n\n// MAIN //\n\n/**\n* Returns the size (in bytes) of the canonical binary representation of a specified numeric type.\n*\n* @param {string} dtype - numeric type\n* @throws {TypeError} must provide a recognized numeric type\n* @returns {integer} size in bytes\n*\n* @example\n* var s = sizeOf( 'int8' );\n* // returns 1\n*\n* @example\n* var s = sizeOf( 'uint8' );\n* // returns 1\n*\n* @example\n* var s = sizeOf( 'int16' );\n* // returns 2\n*/\nfunction sizeOf( dtype ) {\n\tswitch ( dtype ) {\n\tcase 'float64':\n\t\treturn FLOAT64;\n\tcase 'int32':\n\t\treturn INT32;\n\tcase 'uint32':\n\t\treturn UINT32;\n\tcase 'float32':\n\t\treturn FLOAT32;\n\tcase 'int8':\n\t\treturn INT8;\n\tcase 'uint8':\n\t\t// Fall-through...\n\tcase 'uint8c': // eslint-disable-line no-fallthrough\n\t\treturn UINT8;\n\tcase 'int16':\n\t\treturn INT16;\n\tcase 'uint16':\n\t\treturn UINT16;\n\tcase 'float16':\n\t\treturn FLOAT16;\n\tcase 'complex128':\n\t\treturn COMPLEX128;\n\tcase 'complex64':\n\t\treturn COMPLEX64;\n\tdefault:\n\t\tthrow new TypeError( format( '1XZBn,Ol', dtype ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default sizeOf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a 64-bit complex number.\n*\n* @module @stdlib/constants-complex64-num-bytes\n* @type {integer32}\n*\n* @example\n* import COMPLEX64_NUM_BYTES from '@stdlib/constants-complex64-num-bytes';\n* // returns 8\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a 64-bit complex number.\n*\n* @constant\n* @type {integer32}\n* @default 8\n*/\nvar COMPLEX64_NUM_BYTES = 8|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default COMPLEX64_NUM_BYTES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a single-precision floating-point number.\n*\n* @module @stdlib/constants-float32-num-bytes\n* @type {integer32}\n*\n* @example\n* import FLOAT32_NUM_BYTES from '@stdlib/constants-float32-num-bytes';\n* // returns 4\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a single-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default 4\n*/\nvar FLOAT32_NUM_BYTES = 4|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT32_NUM_BYTES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of an 8-bit unsigned integer.\n*\n* @module @stdlib/constants-uint8-num-bytes\n* @type {integer32}\n*\n* @example\n* import UINT8_NUM_BYTES from '@stdlib/constants-uint8-num-bytes';\n* // returns 1\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of an 8-bit unsigned integer.\n*\n* @constant\n* @type {integer32}\n* @default 1\n*/\nvar UINT8_NUM_BYTES = 1|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default UINT8_NUM_BYTES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a half-precision floating-point number.\n*\n* @module @stdlib/constants-float16-num-bytes\n* @type {integer32}\n*\n* @example\n* import FLOAT16_NUM_BYTES from '@stdlib/constants-float16-num-bytes';\n* // returns 2\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a half-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default 2\n*/\nvar FLOAT16_NUM_BYTES = 2|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT16_NUM_BYTES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a 128-bit complex number.\n*\n* @module @stdlib/constants-complex128-num-bytes\n* @type {integer32}\n*\n* @example\n* import COMPLEX128_NUM_BYTES from '@stdlib/constants-complex128-num-bytes';\n* // returns 16\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a 128-bit complex number.\n*\n* @constant\n* @type {integer32}\n* @default 16\n*/\nvar COMPLEX128_NUM_BYTES = 16|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default COMPLEX128_NUM_BYTES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Formats an error message for production.\n*\n* @param {string} code - error code\n* @param {*} ...args - error message arguments\n* @returns {string} formatted error message\n*\n* @example\n* var msg = fmtprodmsg( '3', 'wrong_type' );\n* // returns 'https://stdlib.io/e/3?&arg[]=wrong_type'\n*/\nfunction fmtprodmsg() {\n\tvar a = arguments;\n\tvar c = a[ 0 ];\n\tvar u = 'https://stdlib.io/e/'+c+'?';\n\tvar i;\n\tfor ( i = 1; i < a.length; i++ ) {\n\t\tu += '&arg[]=' + encodeURIComponent( a[ i ] );\n\t}\n\treturn u;\n}\n\n\n// EXPORTS //\n\nexport default fmtprodmsg;\n"],"names":["dtype","TypeError","i","a","arguments","u","length","encodeURIComponent","format"],"mappings":";gDAyDA,SAAiBA,GAChB,OAASA,GACT,IAAK,UAsBL,IAAK,YACJ,OCzCwB,EDoBzB,IAAK,QAEL,IAAK,SAEL,IAAK,UACJ,OEzBsB,EF0BvB,IAAK,OAEL,IAAK,QAEL,IAAK,SACJ,OG/BoB,EHgCrB,IAAK,QAEL,IAAK,SAEL,IAAK,UACJ,OIrCsB,EJsCvB,IAAK,aACJ,OKvCyB,GL0C1B,QACC,MAAM,IAAIC,UMnDZ,WACC,IAGIC,EAHAC,EAAIC,UAEJC,EAAI,uBADAF,EAAG,GACsB,IAEjC,IAAMD,EAAI,EAAGA,EAAIC,EAAEG,OAAQJ,IAC1BG,GAAK,UAAYE,mBAAoBJ,EAAGD,IAEzC,OAAOG,CACR,CN0CuBG,CAAQ,WAAYR,IAE3C"}